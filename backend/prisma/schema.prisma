generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// WORKSPACES: Multi-tenant System
// ============================================

model Workspace {
  id          String          @id @default(uuid()) @db.Uuid
  name        String
  slug        String          @unique
  description String?
  avatarUrl   String?         @map("avatar_url")
  status      WorkspaceStatus @default(ACTIVE)

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  members              WorkspaceMember[]
  teams                Team[]
  managementRules      ManagementRule[]
  cycles               Cycle[]
  gamificationProfiles GamificationProfile[]

  @@index([slug])
  @@index([status])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @map("user_id") @db.Uuid
  workspaceId String        @map("workspace_id") @db.Uuid
  role        WorkspaceRole @default(MEMBER)

  // Timestamps
  joinedAt  DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, workspaceId], name: "unique_user_workspace")
  @@index([userId])
  @@index([workspaceId])
  @@index([role])
  @@map("workspace_members")
}

enum WorkspaceStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum WorkspaceRole {
  OWNER // Criador do workspace, full access
  ADMIN // Admin do workspace
  MEMBER // Membro regular
}

// ============================================
// CORE: Users & Authentication
// ============================================

model User {
  id       String  @id @default(uuid()) @db.Uuid
  email    String  @unique
  password String
  name     String
  position String?
  bio      String?
  avatarId String? @map("avatar_id")

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations - Workspaces
  workspaceMemberships WorkspaceMember[]

  // Relations - Teams
  teamMemberships TeamMember[]

  // Relations - Management
  managementRulesAsManager     ManagementRule[] @relation("ManagerRules")
  managementRulesAsSubordinate ManagementRule[] @relation("SubordinateRules")

  // Relations - PDI & Gamification
  gamificationProfiles GamificationProfile[] // One-to-many: um user pode ter m√∫ltiplos profiles (um por workspace)
  cycles               Cycle[]               @relation("UserCycles")
  goals                Goal[]
  competencies         Competency[]
  activities           Activity[]
  oneOnOneActivitiesAsParticipant OneOnOneActivity[] @relation("OneOnOneParticipant")

  // Relations - Notifications
  notificationPreference NotificationPreference?
  emailLogs              EmailLog[]

  @@map("users")
}

// ============================================
// TEAMS: Organization Structure
// ============================================

model Team {
  id          String     @id @default(uuid()) @db.Uuid
  workspaceId String     @map("workspace_id") @db.Uuid
  name        String
  description String?
  status      TeamStatus @default(ACTIVE)

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members         TeamMember[]
  managementRules ManagementRule[]

  // Constraints
  @@unique([workspaceId, name], name: "unique_workspace_team_name")
  @@index([workspaceId])
  @@map("teams")
}

model TeamMember {
  id     String   @id @default(uuid()) @db.Uuid
  userId String   @map("user_id") @db.Uuid
  teamId String   @map("team_id") @db.Uuid
  role   TeamRole @default(MEMBER)

  // Timestamps
  joinedAt  DateTime  @default(now()) @map("joined_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([userId, teamId], name: "unique_user_team")
  @@index([teamId])
  @@index([userId])
  @@index([role])
  @@map("team_members")
}

enum TeamStatus {
  ACTIVE
  ARCHIVED
}

enum TeamRole {
  MANAGER
  MEMBER
}

// ============================================
// MANAGEMENT: Hierarchy System
// ============================================

model ManagementRule {
  id            String             @id @default(uuid()) @db.Uuid
  workspaceId   String             @map("workspace_id") @db.Uuid
  ruleType      ManagementRuleType @map("rule_type")
  managerId     String             @map("manager_id") @db.Uuid
  teamId        String?            @map("team_id") @db.Uuid
  subordinateId String?            @map("subordinate_id") @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  manager     User      @relation("ManagerRules", fields: [managerId], references: [id], onDelete: Cascade)
  subordinate User?     @relation("SubordinateRules", fields: [subordinateId], references: [id], onDelete: Cascade)
  team        Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([workspaceId, managerId, subordinateId, ruleType], name: "unique_workspace_manager_subordinate_rule")
  @@unique([workspaceId, managerId, teamId, ruleType], name: "unique_workspace_manager_team_rule")
  @@index([workspaceId])
  @@index([managerId])
  @@index([subordinateId])
  @@index([teamId])
  @@index([ruleType])
  // üöÄ √çNDICES COMPOSTOS OTIMIZADOS para consultas de hierarchy
  @@index([workspaceId, managerId, deletedAt], name: "idx_workspace_manager_deleted")
  @@index([workspaceId, subordinateId, deletedAt], name: "idx_workspace_subordinate_deleted")
  @@index([workspaceId, deletedAt, ruleType], name: "idx_workspace_deleted_ruletype")
  @@map("management_rules")
}

enum ManagementRuleType {
  INDIVIDUAL
  TEAM
}

// ============================================
// GAMIFICATION: XP, Levels, Badges & Streaks
// ============================================

model GamificationProfile {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  workspaceId  String   @map("workspace_id") @db.Uuid
  level        Int      @default(1)
  currentXP    Int      @default(0) @map("current_xp")
  totalXP      Int      @default(0) @map("total_xp")
  streak       Int      @default(0) // Dias consecutivos ativos
  lastActiveAt DateTime @default(now()) @map("last_active_at")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace      Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  badges         Badge[]
  xpTransactions XpTransaction[] // Hist√≥rico de todas as transa√ß√µes de XP

  // Constraints: Um usu√°rio s√≥ pode ter um perfil por workspace
  @@unique([userId, workspaceId], name: "unique_user_workspace_gamification")
  @@index([userId])
  @@index([workspaceId])
  @@index([level])
  @@map("gamification_profiles")
}

model Badge {
  id                    String    @id @default(uuid()) @db.Uuid
  gamificationProfileId String    @map("gamification_profile_id") @db.Uuid
  type                  BadgeType
  name                  String
  description           String?
  earnedAt              DateTime  @default(now()) @map("earned_at")

  // Relations
  gamificationProfile GamificationProfile @relation(fields: [gamificationProfileId], references: [id], onDelete: Cascade)

  @@index([gamificationProfileId])
  @@index([type])
  @@map("badges")
}

enum BadgeType {
  STREAK_7 // 7 dias de streak
  STREAK_30 // 30 dias de streak
  STREAK_100 // 100 dias de streak
  GOAL_MASTER // Completou 10 metas
  MENTOR // Realizou 5 mentorias
  CERTIFIED // Obteve 3 certifica√ß√µes
  TEAM_PLAYER // Realizou 10 1:1s
  FAST_LEARNER // Subiu 3 n√≠veis em uma compet√™ncia
  CONSISTENT // Atualizou metas por 30 dias seguidos
}

// Hist√≥rico de XP - Trackeia todas as transa√ß√µes de XP
model XpTransaction {
  id                    String   @id @default(uuid()) @db.Uuid
  gamificationProfileId String   @map("gamification_profile_id") @db.Uuid
  amount                Int // Quantidade de XP (sempre positivo)
  source                XpSource // Origem do XP
  sourceId              String?  @map("source_id") @db.Uuid // ID da atividade/goal/competency
  reason                String // Descri√ß√£o leg√≠vel (ex: "1:1 com Maria Santos")

  // Snapshot do estado ap√≥s transa√ß√£o
  previousXP    Int     @map("previous_xp")
  newXP         Int     @map("new_xp")
  previousLevel Int     @map("previous_level")
  newLevel      Int     @map("new_level")
  leveledUp     Boolean @default(false) @map("leveled_up") // Se subiu de n√≠vel nesta transa√ß√£o

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  gamificationProfile GamificationProfile @relation(fields: [gamificationProfileId], references: [id], onDelete: Cascade)

  @@index([gamificationProfileId])
  @@index([source])
  @@index([createdAt])
  @@map("xp_transactions")
}

enum XpSource {
  ACTIVITY_ONE_ON_ONE // +50 XP por 1:1
  ACTIVITY_MENTORING // +75 XP por mentoria
  ACTIVITY_CERTIFICATION // +100 XP por certifica√ß√£o
  GOAL_UPDATE // +25 XP por atualiza√ß√£o de meta
  COMPETENCY_UPDATE // +30 XP por atualiza√ß√£o de compet√™ncia
  GOAL_COMPLETED // +100 XP b√¥nus ao completar meta
  COMPETENCY_LEVEL_UP // +50 XP b√¥nus ao subir n√≠vel de compet√™ncia
  STREAK_BONUS // +10 XP por manter streak
  MANUAL // XP manual (admin)
}

// ============================================
// CYCLES: PDI Development Cycles
// ============================================

model Cycle {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  workspaceId String      @map("workspace_id") @db.Uuid
  name        String
  description String?
  startDate   DateTime    @map("start_date")
  endDate     DateTime    @map("end_date")
  status      CycleStatus @default(ACTIVE)

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  user         User         @relation("UserCycles", fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  goals        Goal[]
  competencies Competency[]
  activities   Activity[]

  @@index([userId])
  @@index([workspaceId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("cycles")
}

enum CycleStatus {
  DRAFT // Rascunho, ainda n√£o iniciado
  ACTIVE // Ciclo ativo
  COMPLETED // Ciclo finalizado
  ARCHIVED // Arquivado
}

// ============================================
// GOALS: PDI Goals & Objectives
// ============================================

model Goal {
  id          String     @id @default(uuid()) @db.Uuid
  cycleId     String     @map("cycle_id") @db.Uuid
  userId      String     @map("user_id") @db.Uuid
  title       String
  description String?
  type        GoalType
  status      GoalStatus @default(ACTIVE)

  // Valores para metas quantitativas
  currentValue Float?  @map("current_value")
  targetValue  Float?  @map("target_value")
  startValue   Float?  @map("start_value")
  unit         String? // Ex: "PRs", "bugs", "%"

  // Timestamps
  lastUpdateAt DateTime? @map("last_update_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  cycle   Cycle        @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  updates GoalUpdate[]

  @@index([cycleId])
  @@index([userId])
  @@index([status])
  @@index([type])
  @@map("goals")
}

enum GoalType {
  INCREASE // Aumentar valor (ex: PRs de 0 para 15)
  DECREASE // Diminuir valor (ex: bugs de 20 para 10)
  PERCENTAGE // Atingir % (ex: cobertura de testes 90%)
  BINARY // Sim/N√£o (ex: obter certifica√ß√£o)
}

enum GoalStatus {
  ACTIVE // Meta ativa
  COMPLETED // Meta completada
  BLOCKED // Meta bloqueada
  CANCELLED // Meta cancelada
}

model GoalUpdate {
  id            String  @id @default(uuid()) @db.Uuid
  goalId        String  @map("goal_id") @db.Uuid
  previousValue Float?  @map("previous_value")
  newValue      Float?  @map("new_value")
  notes         String? @db.Text
  xpEarned      Int     @default(0) @map("xp_earned")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@index([goalId])
  @@index([createdAt])
  @@map("goal_updates")
}

// ============================================
// COMPETENCIES: Skills & Development Areas
// ============================================

model Competency {
  id              String             @id @default(uuid()) @db.Uuid
  cycleId         String             @map("cycle_id") @db.Uuid
  userId          String             @map("user_id") @db.Uuid
  name            String
  category        CompetencyCategory
  currentLevel    Int                @default(1) @map("current_level")
  targetLevel     Int                @map("target_level")
  currentProgress Int                @default(0) @map("current_progress") // 0-100
  totalXP         Int                @default(0) @map("total_xp")

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  cycle   Cycle              @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  updates CompetencyUpdate[]

  @@index([cycleId])
  @@index([userId])
  @@index([category])
  @@map("competencies")
}

enum CompetencyCategory {
  TECHNICAL // Compet√™ncias t√©cnicas
  LEADERSHIP // Lideran√ßa
  BEHAVIORAL // Comportamentais
}

model CompetencyUpdate {
  id               String  @id @default(uuid()) @db.Uuid
  competencyId     String  @map("competency_id") @db.Uuid
  previousProgress Int     @map("previous_progress")
  newProgress      Int     @map("new_progress")
  notes            String? @db.Text
  evidenceUrl      String? @map("evidence_url")
  xpEarned         Int     @default(0) @map("xp_earned")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  competency Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@index([competencyId])
  @@index([createdAt])
  @@map("competency_updates")
}

// ============================================
// ACTIVITIES: Timeline Events (1:1, Mentoring, etc)
// ============================================

model Activity {
  id          String       @id @default(uuid()) @db.Uuid
  cycleId     String       @map("cycle_id") @db.Uuid
  userId      String       @map("user_id") @db.Uuid
  type        ActivityType
  title       String
  description String?      @db.Text
  xpEarned    Int          @default(0) @map("xp_earned")
  duration    Int? // Dura√ß√£o em minutos

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  cycle Cycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relacionamentos polim√≥rficos (um activity pode ser um dos tipos)
  oneOnOne      OneOnOneActivity?
  mentoring     MentoringActivity?
  certification CertificationActivity?

  @@index([cycleId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("activities")
}

enum ActivityType {
  ONE_ON_ONE // Reuni√£o 1:1
  MENTORING // Sess√£o de mentoria
  CERTIFICATION // Certifica√ß√£o/Curso
  GOAL_UPDATE // Atualiza√ß√£o de meta
  COMPETENCY_UPDATE // Atualiza√ß√£o de compet√™ncia
}

// ============================================
// ACTIVITY TYPES: Specialized Activity Data
// ============================================

model OneOnOneActivity {
  id                String    @id @default(uuid()) @db.Uuid
  activityId        String    @unique @map("activity_id") @db.Uuid
  participantId     String?   @map("participant_id") @db.Uuid
  participantName   String    @map("participant_name")
  workingOn         Json      // Array de strings: O que est√° trabalhando
  generalNotes      String    @map("general_notes") @db.Text
  positivePoints    Json      @map("positive_points") // Array de strings
  improvementPoints Json      @map("improvement_points") // Array de strings
  nextSteps         Json      @map("next_steps") // Array de strings
  completedAt       DateTime? @map("completed_at")

  // Relations
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  participant User?    @relation("OneOnOneParticipant", fields: [participantId], references: [id])

  @@index([activityId])
  @@index([participantId])
  @@map("one_on_one_activities")
}

model MentoringActivity {
  id           String  @id @default(uuid()) @db.Uuid
  activityId   String  @unique @map("activity_id") @db.Uuid
  menteeName   String  @map("mentee_name")
  topics       Json // Array de strings: T√≥picos discutidos
  progressFrom Int?    @map("progress_from") // Progresso inicial (%)
  progressTo   Int?    @map("progress_to") // Progresso final (%)
  outcomes     String? @db.Text
  nextSteps    Json    @map("next_steps") // Array de strings

  // Relations
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@map("mentoring_activities")
}

model CertificationActivity {
  id                String  @id @default(uuid()) @db.Uuid
  activityId        String  @unique @map("activity_id") @db.Uuid
  certificationName String  @map("certification_name")
  topics            Json // Array de strings: T√≥picos cobertos
  outcomes          String? @db.Text
  rating            Int? // 1-5: Auto-avalia√ß√£o da dificuldade/qualidade
  nextSteps         Json    @map("next_steps") // Array de strings

  // Relations
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@map("certification_activities")
}

// ============================================
// NOTIFICATIONS: Email System
// ============================================

model NotificationPreference {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid

  // Categorias de notifica√ß√£o
  onboarding   Boolean @default(true)
  gamification Boolean @default(true)
  pdi          Boolean @default(true)
  management   Boolean @default(true)
  weeklyReport Boolean @default(true) @map("weekly_report")

  // Frequ√™ncia de digest
  digestFrequency DigestFrequency @default(REALTIME) @map("digest_frequency")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model EmailLog {
  id       String      @id @default(uuid()) @db.Uuid
  userId   String?     @map("user_id") @db.Uuid
  to       String
  subject  String
  template String
  status   EmailStatus @default(QUEUED)
  error    String?     @db.Text
  sentAt   DateTime?   @map("sent_at")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("email_logs")
}

enum DigestFrequency {
  REALTIME // Enviar imediatamente
  DAILY // Digest di√°rio
  WEEKLY // Digest semanal
  OFF // Desligado
}

enum EmailStatus {
  QUEUED
  SENDING
  SENT
  FAILED
  BOUNCED
}
