generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// WORKSPACES: Multi-tenant System
// ============================================

model Workspace {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  slug          String          @unique
  description   String?
  avatarUrl     String?         @map("avatar_url")
  status        WorkspaceStatus @default(ACTIVE)
  
  // Timestamps
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")
  
  // Relations
  members           WorkspaceMember[]
  teams             Team[]
  managementRules   ManagementRule[]
  
  @@index([slug])
  @@index([status])
  @@map("workspaces")
}

model WorkspaceMember {
  id            String        @id @default(uuid()) @db.Uuid
  userId        String        @map("user_id") @db.Uuid
  workspaceId   String        @map("workspace_id") @db.Uuid
  role          WorkspaceRole @default(MEMBER)
  
  // Timestamps
  joinedAt      DateTime      @default(now()) @map("joined_at")
  deletedAt     DateTime?     @map("deleted_at")
  
  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, workspaceId], name: "unique_user_workspace")
  @@index([userId])
  @@index([workspaceId])
  @@index([role])
  @@map("workspace_members")
}

enum WorkspaceStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum WorkspaceRole {
  OWNER      // Criador do workspace, full access
  ADMIN      // Admin do workspace
  MEMBER     // Membro regular
}

// ============================================
// CORE: Users & Authentication
// ============================================

model User {
  id            String      @id @default(uuid()) @db.Uuid
  email         String      @unique
  password      String
  name          String
  position      String?
  bio           String?
  
  // Timestamps
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")
  
  // Relations - Workspaces
  workspaceMemberships                  WorkspaceMember[]
  
  // Relations - Teams
  teamMemberships                       TeamMember[]
  
  // Relations - Management
  managementRulesAsManager              ManagementRule[] @relation("ManagerRules")
  managementRulesAsSubordinate          ManagementRule[] @relation("SubordinateRules")
  
  @@map("users")
}

// ============================================
// TEAMS: Organization Structure
// ============================================

model Team {
  id              String      @id @default(uuid()) @db.Uuid
  workspaceId     String      @map("workspace_id") @db.Uuid
  name            String
  description     String?
  status          TeamStatus  @default(ACTIVE)
  
  // Timestamps
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")
  
  // Relations
  workspace         Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members           TeamMember[]
  managementRules   ManagementRule[]
  
  // Constraints
  @@unique([workspaceId, name], name: "unique_workspace_team_name")
  @@index([workspaceId])
  @@map("teams")
}

model TeamMember {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  teamId      String      @map("team_id") @db.Uuid
  role        TeamRole    @default(MEMBER)
  
  // Timestamps
  joinedAt    DateTime    @default(now()) @map("joined_at")
  deletedAt   DateTime?   @map("deleted_at")
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, teamId], name: "unique_user_team")
  @@index([teamId])
  @@index([userId])
  @@index([role])
  @@map("team_members")
}

enum TeamStatus {
  ACTIVE
  ARCHIVED
}

enum TeamRole {
  MANAGER
  MEMBER
}

// ============================================
// MANAGEMENT: Hierarchy System
// ============================================

model ManagementRule {
  id                String              @id @default(uuid()) @db.Uuid
  workspaceId       String              @map("workspace_id") @db.Uuid
  ruleType          ManagementRuleType  @map("rule_type")
  managerId         String              @map("manager_id") @db.Uuid
  teamId            String?             @map("team_id") @db.Uuid
  subordinateId     String?             @map("subordinate_id") @db.Uuid
  
  // Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")
  
  // Relations
  workspace         Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  manager           User                @relation("ManagerRules", fields: [managerId], references: [id], onDelete: Cascade)
  subordinate       User?               @relation("SubordinateRules", fields: [subordinateId], references: [id], onDelete: Cascade)
  team              Team?               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([workspaceId, managerId, subordinateId, ruleType], name: "unique_workspace_manager_subordinate_rule")
  @@unique([workspaceId, managerId, teamId, ruleType], name: "unique_workspace_manager_team_rule")
  @@index([workspaceId])
  @@index([managerId])
  @@index([subordinateId])
  @@index([teamId])
  @@index([ruleType])
  @@map("management_rules")
}

enum ManagementRuleType {
  INDIVIDUAL
  TEAM
}
