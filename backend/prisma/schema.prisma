generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ManagementRule {
  id                                      BigInt             @id @default(autoincrement())
  managerId                               BigInt
  teamId                                  BigInt?
  subordinateId                           BigInt?
  createdAt                               DateTime           @default(now())
  updatedAt                               DateTime           @updatedAt
  ruleType                                ManagementRuleType
  deleted_at                              DateTime?
  User_ManagementRule_managerIdToUser     User               @relation("ManagementRule_managerIdToUser", fields: [managerId], references: [id], onDelete: Cascade)
  User_ManagementRule_subordinateIdToUser User?              @relation("ManagementRule_subordinateIdToUser", fields: [subordinateId], references: [id], onDelete: Cascade)
  Team                                    Team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  @@unique([managerId, subordinateId, ruleType])
  @@unique([managerId, teamId, ruleType])
  @@index([managerId])
  @@index([subordinateId])
  @@index([teamId])
  @@index([ruleType])
}

model PdiPlan {
  id           BigInt    @id @default(autoincrement())
  userId       BigInt    @unique
  competencies String[]
  milestones   Json
  krs          Json?
  records      Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deleted_at   DateTime?
  User         User      @relation(fields: [userId], references: [id])
}

model Team {
  id             BigInt           @id @default(autoincrement())
  name           String           @unique
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deleted_at     DateTime?
  ManagementRule ManagementRule[]
  TeamMembership TeamMembership[]
}

model TeamMembership {
  id         BigInt    @id @default(autoincrement())
  teamId     BigInt
  userId     BigInt
  role       TeamRole  @default(MEMBER)
  createdAt  DateTime  @default(now())
  deleted_at DateTime?
  Team       Team      @relation(fields: [teamId], references: [id])
  User       User      @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([teamId, role])
  @@index([userId])
}

model User {
  id                                                BigInt           @id @default(autoincrement())
  email                                             String           @unique
  password                                          String
  name                                              String
  createdAt                                         DateTime         @default(now())
  updatedAt                                         DateTime         @updatedAt
  isAdmin                                           Boolean          @default(false)
  github_id                                         String?          @unique
  bio                                               String?
  position                                          String?
  deleted_at                                        DateTime?
  ManagementRule_ManagementRule_managerIdToUser     ManagementRule[] @relation("ManagementRule_managerIdToUser")
  ManagementRule_ManagementRule_subordinateIdToUser ManagementRule[] @relation("ManagementRule_subordinateIdToUser")
  PdiPlan                                           PdiPlan?
  TeamMembership                                    TeamMembership[]
  pull_requests                                     pull_requests[]
  User_A                                            User[]           @relation("UserManagers")
  User_B                                            User[]           @relation("UserManagers")
  pdiCycles                                         PdiCycle[]
}

model file_changes {
  sha           String         @id
  filename      String?
  status        String?
  additions     BigInt?
  deletions     BigInt?
  changes       BigInt?
  patch         String?
  pr_id         BigInt?
  deleted_at    DateTime?
  pull_requests pull_requests? @relation(fields: [pr_id], references: [id])

  @@index([pr_id])
}

model pull_requests {
  id               BigInt         @id
  number           BigInt?
  node_id          String?
  user             String?
  title            String?
  created_at       DateTime?
  updated_at       DateTime?
  closed_at        DateTime?
  merged_at        DateTime?
  body             String?
  repo             String?
  last_reviewed_at DateTime?
  review_text      String?
  total_additions  BigInt?
  total_deletions  BigInt?
  total_changes    BigInt?
  ownerUserId      BigInt?
  state            PrState?
  deleted_at       DateTime?
  file_changes     file_changes[]
  User             User?          @relation(fields: [ownerUserId], references: [id])

  @@index([ownerUserId], map: "pull_req_owner_user_id_idx")
  @@index([repo], map: "pull_req_repo_idx")
  @@index([state], map: "pull_req_state_idx")
  @@index([title], map: "pull_req_title_idx")
  @@index([user], map: "pull_req_user_idx")
  @@index([created_at])
  @@index([merged_at])
}

enum ManagementRuleType {
  TEAM
  INDIVIDUAL
}

enum PrState {
  open
  closed
  merged
}

enum TeamRole {
  MEMBER
  MANAGER
}

enum PdiCycleStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

model PdiCycle {
  id           BigInt         @id @default(autoincrement())
  userId       BigInt
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  status       PdiCycleStatus @default(PLANNED)
  competencies String[]
  krs          Json?
  milestones   Json
  records      Json
  progressMeta Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted_at   DateTime?
  User         User           @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([startDate])
  @@index([endDate])
}
