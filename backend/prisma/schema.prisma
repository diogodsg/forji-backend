// Prisma schema for Forge backend authentication and user management
// Run `npx prisma migrate dev --name init` after editing

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  name      String
  isAdmin   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pdiPlan   PdiPlan?

  // Many-to-many self relation: users can have multiple managers and manage multiple reports
  managers User[] @relation("UserManagers")
  reports  User[] @relation("UserManagers")

  // One-to-many: PRs owned by this user (optional linkage)
  pullRequests PullRequest[]
}

model PullRequest {
  id              Int       @id
  number          Int?      @map("number")
  nodeId          String?   @map("node_id")
  user            String?   @map("user")
  title           String?
  createdAt       DateTime? @map("created_at")
  updatedAt       DateTime? @map("updated_at")
  closedAt        DateTime? @map("closed_at")
  mergedAt        DateTime? @map("merged_at")
  body            String?
  repo            String?
  state           String?
  lastReviewedAt  DateTime? @map("last_reviewed_at")
  reviewText      String?   @map("review_text")
  totalAdditions  Int?      @map("total_additions")
  totalDeletions  Int?      @map("total_deletions")
  totalChanges    Int?      @map("total_changes")

  // Optional link to an application user (for manager filtering)
  ownerUserId     Int?
  ownerUser       User?     @relation(fields: [ownerUserId], references: [id])

  @@map("pull_requests")
}

// PDI Plan persisted as JSON blobs for fast iteration.
// Later this can be normalized into separate tables.
model PdiPlan {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int       @unique
  competencies String[]  // text[] of competencies
  milestones   Json      // PdiMilestone[]
  krs          Json?     // PdiKeyResult[]
  records      Json      // PdiCompetencyRecord[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
