generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// WORKSPACES: Multi-tenant System
// ============================================

model Workspace {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  slug          String          @unique
  description   String?
  avatar_url    String?
  status        WorkspaceStatus @default(ACTIVE)
  
  // Timestamps
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  deleted_at    DateTime?
  
  // Relations
  members           WorkspaceMember[]
  teams             Team[]
  management_rules  ManagementRule[]
  
  @@index([slug])
  @@index([status])
  @@map("workspaces")
}

model WorkspaceMember {
  id            String        @id @default(uuid()) @db.Uuid
  user_id       String        @db.Uuid
  workspace_id  String        @db.Uuid
  role          WorkspaceRole @default(MEMBER)
  
  // Timestamps
  joined_at     DateTime      @default(now())
  deleted_at    DateTime?
  
  // Relations
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workspace     Workspace     @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([user_id, workspace_id], name: "unique_user_workspace")
  @@index([user_id])
  @@index([workspace_id])
  @@index([role])
  @@map("workspace_members")
}

enum WorkspaceStatus {
  ACTIVE
  SUSPENDED
  ARCHIVED
}

enum WorkspaceRole {
  OWNER      // Criador do workspace, full access
  ADMIN      // Admin do workspace
  MEMBER     // Membro regular
}

// ============================================
// CORE: Users & Authentication
// ============================================

model User {
  id            String      @id @default(uuid()) @db.Uuid
  email         String      @unique
  password      String
  name          String
  position      String?
  bio           String?
  
  // Timestamps
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
  
  // Relations - Workspaces
  workspace_memberships                 WorkspaceMember[]
  
  // Relations - Teams
  team_memberships                      TeamMember[]
  
  // Relations - Management
  management_rules_as_manager           ManagementRule[] @relation("ManagerRules")
  management_rules_as_subordinate       ManagementRule[] @relation("SubordinateRules")
  
  @@map("users")
}

// ============================================
// TEAMS: Organization Structure
// ============================================

model Team {
  id              String      @id @default(uuid()) @db.Uuid
  workspace_id    String      @db.Uuid
  name            String
  description     String?
  status          TeamStatus  @default(ACTIVE)
  
  // Timestamps
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime?
  
  // Relations
  workspace         Workspace       @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  members           TeamMember[]
  management_rules  ManagementRule[]
  
  // Constraints
  @@unique([workspace_id, name], name: "unique_workspace_team_name")
  @@index([workspace_id])
  @@map("teams")
}

model TeamMember {
  id          String      @id @default(uuid()) @db.Uuid
  user_id     String      @db.Uuid
  team_id     String      @db.Uuid
  role        TeamRole    @default(MEMBER)
  
  // Timestamps
  joined_at   DateTime    @default(now())
  deleted_at  DateTime?
  
  // Relations
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  team        Team        @relation(fields: [team_id], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([user_id, team_id], name: "unique_user_team")
  @@index([team_id])
  @@index([user_id])
  @@index([role])
  @@map("team_members")
}

enum TeamStatus {
  ACTIVE
  ARCHIVED
}

enum TeamRole {
  MANAGER
  MEMBER
}

// ============================================
// MANAGEMENT: Hierarchy System
// ============================================

model ManagementRule {
  id                String              @id @default(uuid()) @db.Uuid
  workspace_id      String              @db.Uuid
  rule_type         ManagementRuleType
  manager_id        String              @db.Uuid
  team_id           String?             @db.Uuid
  subordinate_id    String?             @db.Uuid
  
  // Timestamps
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  
  // Relations
  workspace         Workspace           @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  manager           User                @relation("ManagerRules", fields: [manager_id], references: [id], onDelete: Cascade)
  subordinate       User?               @relation("SubordinateRules", fields: [subordinate_id], references: [id], onDelete: Cascade)
  team              Team?               @relation(fields: [team_id], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([workspace_id, manager_id, subordinate_id, rule_type], name: "unique_workspace_manager_subordinate_rule")
  @@unique([workspace_id, manager_id, team_id, rule_type], name: "unique_workspace_manager_team_rule")
  @@index([workspace_id])
  @@index([manager_id])
  @@index([subordinate_id])
  @@index([team_id])
  @@index([rule_type])
  @@map("management_rules")
}

enum ManagementRuleType {
  INDIVIDUAL
  TEAM
}
